/* Generated by Cython 3.0.0a10 */

#ifndef __PYX_HAVE__mcdp__context
#define __PYX_HAVE__mcdp__context

#include "Python.h"
struct DpHandlerMetaObject;
struct DpContextObject;

/* "mcdp/context.pxd":8
 * 
 * 
 * ctypedef api void (*T_hook)(object nsp) except *             # <<<<<<<<<<<<<<
 * ctypedef api object (*T_handler)(object ctx, object code, object chain)
 * ctypedef api object (*T_connect)(object handler_self, object header)
 */
typedef void (*T_hook)(PyObject *);

/* "mcdp/context.pxd":9
 * 
 * ctypedef api void (*T_hook)(object nsp) except *
 * ctypedef api object (*T_handler)(object ctx, object code, object chain)             # <<<<<<<<<<<<<<
 * ctypedef api object (*T_connect)(object handler_self, object header)
 * 
 */
typedef PyObject *(*T_handler)(PyObject *, PyObject *, PyObject *);

/* "mcdp/context.pxd":10
 * ctypedef api void (*T_hook)(object nsp) except *
 * ctypedef api object (*T_handler)(object ctx, object code, object chain)
 * ctypedef api object (*T_connect)(object handler_self, object header)             # <<<<<<<<<<<<<<
 * 
 * ctypedef struct ContextConfig:
 */
typedef PyObject *(*T_connect)(PyObject *, PyObject *);

/* "mcdp/context.pxd":28
 * 
 * 
 * cdef api class _CHandlerMeta(type) [object DpHandlerMetaObject, type DpHandlerMeta_Type]:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object handler_func
 */
struct DpHandlerMetaObject {
  PyHeapTypeObject __pyx_base;
  struct __pyx_vtabstruct_4mcdp_7context__CHandlerMeta *__pyx_vtab;
  PyObject *handler_func;
  PyObject *link_func;
  PyObject *pop_func;
};

/* "mcdp/context.pxd":54
 * 
 * 
 * cdef api class Context(McdpObject) [object DpContextObject, type DpContext_Type]:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Py_ssize_t length
 */
struct DpContextObject {
  struct DpBaseObject __pyx_base;
  struct __pyx_vtabstruct_4mcdp_7context_Context *__pyx_vtab;
  Py_ssize_t length;
  struct __pyx_obj_4mcdp_7context_Handler *handler_chain;
  PyObject *name;
  struct __pyx_obj_4mcdp_6stream_Stream *stream;
  struct __pyx_obj_4mcdp_7objects_BaseNamespace *namespace;
  struct DpContextObject *back;
};

#ifndef __PYX_HAVE_API__mcdp__context

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(_T) _T
#endif

#endif /* !__PYX_HAVE_API__mcdp__context */

/* WARNING: the interface of the module init function changed in CPython 3.5. */
/* It now returns a PyModuleDef instance instead of a PyModule instance. */

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcontext(void);
#else
/* WARNING: Use PyImport_AppendInittab("context", PyInit_context) instead of calling PyInit_context directly from Python 3.5 */
PyMODINIT_FUNC PyInit_context(void);

#if PY_VERSION_HEX >= 0x03050000 && (defined(__GNUC__) || defined(__clang__) || defined(_MSC_VER) || (defined(__cplusplus) && __cplusplus >= 201402L))
#if defined(__cplusplus) && __cplusplus >= 201402L
[[deprecated("Use PyImport_AppendInittab(\"context\", PyInit_context) instead of calling PyInit_context directly.")]] inline
#elif defined(__GNUC__) || defined(__clang__)
__attribute__ ((__deprecated__("Use PyImport_AppendInittab(\"context\", PyInit_context) instead of calling PyInit_context directly."), __unused__)) __inline__
#elif defined(_MSC_VER)
__declspec(deprecated("Use PyImport_AppendInittab(\"context\", PyInit_context) instead of calling PyInit_context directly.")) __inline
#endif
static PyObject* __PYX_WARN_IF_PyInit_context_INIT_CALLED(PyObject* res) {
  return res;
}
#define PyInit_context() __PYX_WARN_IF_PyInit_context_INIT_CALLED(PyInit_context())
#endif
#endif

#endif /* !__PYX_HAVE__mcdp__context */
