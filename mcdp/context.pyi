from typing import Any, Dict, Final, List, Optional, Union

from .objects import BaseNamespace, McdpObject
from .stream import Stream

class Handler:
    next: Handler

    def __init__(self, next_hdl: Optional[Handler] = None) -> None: ...
    def do_handler(self, ctx: "Context", code: Any) -> Any: ...
    def next_handler(self, ctx: "Context", code: Any) -> Any: ...
    def append(self, hdl: "Handler") -> None: ...
    def link_to(self, new_head: "Handler") -> "Handler": ...
    def __call__(self, code, *, ctx: Optional["Context"] = None) -> Any: ...
    def __iter__(self) -> "HandlerIter": ...


class CommentHandler(Handler):
    def do_handler(self, ctx: Context, code: Any) -> Any: ...
    def link_to(self, new_head: Handler) -> Handler: ...


class HandlerIter:
    cur: Final[Handler]

    def __init__(self, hdl: Handler) -> None: ...
    def __iter__(self) -> "HandlerIter": ...
    def __next__(self) -> Handler: ...


class Context(McdpObject):
    name: Final[str]
    stream: Final[Stream]
    namespace: Final[BaseNamespace]
    back: Final["Context"]

    def __init__(
        self, 
        name: str, 
        back: Optional["Context"] = None, 
        *,
        namespace: Optional[BaseNamespace] = None,
        hdl_chain: Optional[Handler] = None
    ) -> None: ...
    def set_back(self, back: "Context") -> None: ...
    def join(self) -> None: ...
    def activate(self) -> None: ...
    def reactivate(self) -> None: ...
    def deactivate(self) -> None: ...
    def writable(self) -> bool: ...
    def put(self, code: Any) -> None: ...
    def get_handler(self) -> List[Handler]: ...
    def add_handler(self, hdl: Handler) -> None: ...
    def pop_handler(self, hdl: Optional[Handler] = None): ...
    def __len__(self) -> int: ...
    def __enter__(self) -> "Context": ...
    def __exit__(self, exc_type, exc_obj, traceback) -> None: ...


class _CommentImpl:
    """
    Magic method implement class for context.comment

    Usage:

        @namespace.mcfunc
        def test_comment(frame: Frame) -> None:

            # as function
            comment(
                "This is a test function.",
                "Use `comment()` to add comments."
            )

            # as context manager
            with comment:
                insert("In this case, use `insert()` instead of `comment()`.")
                frame.var_int = 5
                frame.var_int += 2      # This part of compiled mc command will turn into comments too.

    """
 
    def __init__(self) -> None: ...
    def ensure(self) -> bool: ...
    def __enter__(self) -> CommentHandler: ...
    def __exit__(self, exc_type, exc_obj, traceback) -> None: ...
    def __call__(self, *comments: Any) -> None: ...


def init_context(nsp: BaseNamespace) -> Context: ...
def get_context() -> Context: ...
def insert(*codes: Any) -> None: ...
def newline(n_line: int = 1) -> None: ...
def _get_ctx_config() -> Dict[str, Any]: ...
def _set_ctx_config(*, max_open: int = ..., max_stack: int = ..., use_comments: bool = ...) -> None: ...
comment = _CommentImpl()


class McdpContextError:
    context: Final[Context]